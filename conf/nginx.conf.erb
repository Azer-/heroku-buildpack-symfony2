# setting worker_processes to CPU core count
worker_processes      1;
daemon off;

events {
  worker_connections  1024;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include mime.types;
	default_type application/octet-stream;


	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

      	##
	# Logging Settings
	##

        access_log          off;
	#access_log logs/nginx/access.log;
        error_log  logs/nginx/error.log;

	##
	# Heroku specific settings
	##

        server_tokens       off;
        proxy_max_temp_file_size	0;
        #fastcgi_max_temp_file_size	0;
        limit_conn_zone $binary_remote_addr zone=phplimit:1m; # define a limit bucket for PHP-FPM
        # don't use server listen port in redirects.
        port_in_redirect off;


        # set $https only when SSL is actually used.
        map $http_x_forwarded_proto $my_https {
          default off;
          https on;
        }

        upstream phpfcgi {
          server unix:/tmp/php-fpm.socket;
        }

        root              /app/web;
        server {
            listen            <%= ENV['PORT'] %>;
            root              /app/web;
            server_name       _;

            # Status. /status.html uses /status
            location ~ ^/(status|ping|infos)$ {
              include         /app/vendor/nginx/conf/fastcgi_params;
              fastcgi_param   HTTPS $my_https if_not_empty;
              fastcgi_pass    phpfcgi;
              fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
            }

            location /server-status {
              stub_status on;
              access_log   off;
            }

            error_log           /app/app/logs/error.log;
            access_log          /app/app/logs/access.log;

            # Some basic cache-control for static files to be sent to the browser
            location ~* \.(?:ico|css|less|js|gif|jpeg|jpg|png)$ {
                expires         max;
                add_header      Pragma public;
                add_header      Cache-Control "public, must-revalidate, proxy-revalidate";
            }

            # Deny hidden files (.htaccess, .htpasswd, .DS_Store).
            location ~ /\. {
              deny            all;
              access_log      off;
              log_not_found   off;
            }

            location = /robots.txt {
              allow           all;
              log_not_found   off;
              access_log      off;
            }

            location @rewriteapp {
                rewrite         ^(.*)$ /app.php/$1 last;
            }

            location / {
                index           app.php;
                try_files       $uri @rewriteapp;
            }

            # pass the PHP scripts to FastCGI server from upstream phpfcgi
            location ~ ^/(app|app_dev|config|check|apc)\.php(/|$) {
                try_files $uri =404;
                limit_conn phplimit 5; # limit to 5 concurrent users to PHP per IP.
                fastcgi_pass phpfcgi;
                fastcgi_split_path_info ^(.+\.php)(/.*)$;
                include /app/vendor/nginx/conf/fastcgi_params;
                fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param  HTTPS off;
            }
            include /app/conf/nginx.d/*.conf;

        }

}
