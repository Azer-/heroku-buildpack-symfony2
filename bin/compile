#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# START CONFIG
NGINX_VERSION=1.2.7
LIBICU_VERSION=50.1.2
LIBMCRYPT_VERSION=2.5.8
LIBMEMCACHED_VERSION=1.0.7
PHP_VERSION=5.4.12
NEWRELIC_VERSION=3.2.5.143
NODE_VERSION=0.6.18
S3_BUCKET=hex-build
# END CONFIG

#
S3_URL="https://${S3_BUCKET}.s3.amazonaws.com"

MANIFEST_FILE="manifest.md5sum"
NGINX_FILE="nginx-${NGINX_VERSION}-heroku.tar.gz"
MCRYPT_FILE="libmcrypt-${LIBMCRYPT_VERSION}.tar.gz"
MEMCACHED_FILE="libmemcached-${LIBMEMCACHED_VERSION}.tar.gz"
ICU_FILE="libicu-${LIBICU_VERSION}.tar.gz"
PHP_FILE="php-${PHP_VERSION}-with-fpm-heroku.tar.gz"
NEWRELIC_FILE="newrelic-${NEWRELIC_VERSION}-heroku.tar.gz"
NODE_FILE="node-${NODE_VERSION}-heroku.tar.gz"

MANIFEST_URL="${S3_URL}/${MANIFEST_FILE}"
NGINX_URL="${S3_URL}/${NGINX_FILE}"
MCRYPT_URL="${S3_URL}/${MCRYPT_FILE}"
MEMCACHED_URL="${S3_URL}/${MEMCACHED_FILE}"
ICU_URL="${S3_URL}/${ICU_FILE}"
PHP_URL="${S3_URL}/${PHP_FILE}"
NEWRELIC_URL="${S3_URL}/${NEWRELIC_FILE}"
NODE_URL="${S3_URL}/${NODE_FILE}"
COMPOSER_URL="http://getcomposer.org/composer.phar"
#

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

function check_md5() {
	SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
	TARGET="$1"
	SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
	OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
	! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
	TARGET_URL="$1"
	curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

# package params: name file version url target
function install {
    echo "-----> Installing ${1} v${3}"
    if [ -f $2 ]
    then
            # check manifest
            if check_md5 $2
            then
                    echo "Bundling ${1} v${3}" | indent
                    echo ${NGINX_URL} | indent
                    download_url ${NGINX_URL}
            else
                    echo "Using cached ${1} v${3}" | indent
            fi
    else
            # fetch
            echo "Bundling ${1} v${3}" | indent
            echo $4 | indent
            download_url $4
    fi
    
    if [ ! -d $5 ]; then
        mkdir -p $5
    fi
    
    tar xzf $2 -C $5
}


BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
BUNDLE_DIR="${CACHE_DIR}/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
export COMPOSER_HOME="${CACHE_DIR}/.composer"

# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR $CACHE_DIR ${BUNDLE_DIR} ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${COMPOSER_HOME} ${BUILD_DIR}/.profile.d

pushd ${BUNDLE_DIR} > /dev/null

if [ -n "`find . -type f -atime +30`" ]
then
	echo "-----> Pruning Unused Cached Bundles"
	find . -type f -atime +30 -delete | indent
fi

echo "-----> Fetching Manifest"
echo ${MANIFEST_URL} | indent
download_url ${MANIFEST_URL}


# Nginx name file version url target
install "Nginx" $NGINX_FILE $NGINX_VERSION $NGINX_URL ${BUILD_DIR}/vendor/nginx

# libmemcached
install "libmemcached" $MEMCACHED_FILE $LIBMEMCACHED_VERSION $MEMCACHED_URL ${BUILD_DIR}/local

# libmcrypt
install "libmcrypt" $MCRYPT_FILE $LIBMCRYPT_VERSION $MCRYPT_URL ${BUILD_DIR}/local

# libicu
install "libicu" $ICU_FILE $LIBICU_VERSION $ICU_URL ${BUILD_DIR}/local


# PHP
install "PHP" $PHP_FILE $PHP_VERSION $PHP_URL ${BUILD_DIR}/vendor/php


# newrelic
install "New Relic" $NEWRELIC_FILE $NEWRELIC_VERSION $NEWRELIC_URL ${BUILD_DIR}/local


# NODE
install "Node" $NODE_FILE $NODE_VERSION $NODE_URL ${BUILD_DIR}/vendor/node
        export PATH="$PATH:${BUILD_DIR}/vendor/node/bin"
        node -v


echo "-----> Installing less"
        npm install -g less


echo "-----> Hacking less & node path"
        ln -s ${BUILD_DIR}/vendor/node/ /app/vendor/node
        export INCLUDE_PATH="${BUILD_DIR}/vendor/node/include"


popd > /dev/null


# Config files
echo "-----> Copying config files"
cp $LP_DIR/conf/php-fpm.conf ${BUILD_DIR}/vendor/php/etc/php-fpm.conf
mkdir -p ${BUILD_DIR}/web/server
cp ${BUILD_DIR}/vendor/php/php/fpm/status.html ${BUILD_DIR}/web/server/status.html
echo "<?php phpinfo() ?>" > ${BUILD_DIR}/web/server/infos.php
cp $LP_DIR/conf/php.ini ${BUILD_DIR}/vendor/php/php.ini
cp -a $LP_DIR/conf/etc.d ${BUILD_DIR}/vendor/php/
cp $LP_DIR/conf/nginx.conf.erb ${BUILD_DIR}/vendor/nginx/conf/nginx.conf.erb
if [ -r $LP_DIR/conf/fastcgi_params.erb ]; then
    cp $LP_DIR/conf/fastcgi_params.erb ${BUILD_DIR}/vendor/nginx/conf/fastcgi_params.erb
fi
cp $LP_DIR/conf/mime.types ${BUILD_DIR}/vendor/nginx/conf/mime.types
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

echo "-----> Checking deps"
LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php -i | grep apc
LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php -i | grep memcache

# Composer Installation
pushd ${BUILD_DIR} > /dev/null

if [ -f "composer.json" ]
then
	echo "-----> Installing dependencies using Composer"
	GIT_DIR_ORIG=${GIT_DIR}
	unset GIT_DIR

	if [ ! -f "composer.phar" ]
	then
		echo "Fetching composer.phar" | indent
		echo ${COMPOSER_URL} | indent
		download_url ${COMPOSER_URL}
	fi

	# Copying php.ini to php temporary installation
	# It solves datezone problem, possible others
	cp $LP_DIR/conf/php.ini ${BUILD_DIR}/vendor/php/bin	

	# Deactivating plugins from php.ini (they won't be found)
	sed -i 's/extension=\(\w*\.so\)/;extension=\1/g' ${BUILD_DIR}/vendor/php/bin/php.ini


        # ini parameters file
	if [ ! -r ${BUILD_DIR}/app/config/parameters.ini ]; then
            if [ -r ${BUILD_DIR}/app/config/parameters_prod.ini.erb ]; then
			erb ${BUILD_DIR}/app/config/parameters_prod.ini.erb > ${BUILD_DIR}/app/config/parameters.ini
            fi
	fi

        # yml parameters file
	if [ ! -r ${BUILD_DIR}/app/config/parameters.yml ]; then
            if [ -r ${BUILD_DIR}/app/config/parameters_prod.yml.erb ]; then
			erb ${BUILD_DIR}/app/config/parameters_prod.yml.erb > ${BUILD_DIR}/app/config/parameters.yml
            fi
	fi

	# Debug info for php.ini
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php -r "phpinfo();" | grep 'Configuration File'

	# do the deed!
	echo "Running: php composer.phar install --quiet --prefer-dist -n --no-progress -o" | indent
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php composer.phar install --prefer-dist -n | indent

	export GIT_DIR=${GIT_DIR_ORIG}
fi
popd > /dev/null

echo "-----> Installing assets"
# Sets the debug flag depending on Sf2 env (declared at the begeining of the file)
export SF_DEBUG="--no-debug"
export SF_ENV="prod"

# Deploying assets - for some reason cd is neccesary
cd ${BUILD_DIR}
#echo "-------> Running: app/console assets:install --symlink  --env=${SF_ENV}"
LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php ${BUILD_DIR}/app/console assets:install --symlink --env=${SF_ENV}
#echo "-------> Running: app/console assetic:dump ${SF_DEBUG} --env=${SF_ENV}"
LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php ${BUILD_DIR}/app/console assetic:dump --env=${SF_ENV}


echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting nginx"

# Override config files if provided in app.
if [ -d /app/conf ]; then

	# Symfony2 database detection
	if [ -r /app/app/config/parameters_prod.yml.erb ]; then
		erb /app/app/config/parameters_prod.yml.erb > /app/app/config/parameters.yml
	fi

	if [ -r /app/app/config/parameters_prod.ini.erb ]; then
		erb /app/app/config/parameters_prod.ini.erb > /app/app/config/parameters.ini
	fi

	mkdir -p /app/conf/nginx.d

	if [ -d /app/conf/etc.d ]; then
		cp -f /app/conf/etc.d/* /app/vendor/php/etc.d/
	fi

	if [ -r /app/conf/php-fpm.conf ]; then
		cp -f /app/conf/php-fpm.conf /app/vendor/php/etc/php-fpm.conf
	fi

	if [ -r /app/conf/php.ini ]; then
		cp -f /app/conf/php.ini /app/vendor/php/php.ini
	fi

	if [ -r /app/conf/nginx.conf.erb ]; then
		cp -f /app/conf/nginx.conf.erb /app/vendor/nginx/conf/nginx.conf.erb
	fi

	if [ -r /app/conf/fastcgi_params.erb ]; then
		cp -f /app/conf/fastcgi_params.erb /app/vendor/nginx/conf/fastcgi_params
	fi

fi

# Set correct port variable.
erb /app/vendor/nginx/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf
if [ -r $LP_DIR/conf/fastcgi_params.erb ]; then
    erb /app/vendor/nginx/conf/fastcgi_params.erb > /app/vendor/nginx/conf/fastcgi_params
fi

if [ -d /app/conf/nginx.d ]; then
	# Parse .erb into .conf.
	for f in /app/conf/nginx.d/*.erb
	do
		if [ -r "\${f}" ];
		then
			erb "\${f}" > "\${f}.conf"
		fi
	done
fi

# Set NEWRELIC key
if [ "\${NEW_RELIC_LICENSE_KEY}" -a -x "/app/local/bin/newrelic-license" ]; then
	echo "NEWRELIC license setted to ${NEW_RELIC_LICENSE_KEY}"
	/app/local/bin/newrelic-license
fi

# Preserve current php-fpm.conf so that env list does
# not go out of hand across restarts.
if [ -r /app/vendor/php/etc/php-fpm.conf.current ]; then
	cp -f /app/vendor/php/etc/php-fpm.conf.current /app/vendor/php/etc/php-fpm.conf
else
	cp -f /app/vendor/php/etc/php-fpm.conf /app/vendor/php/etc/php-fpm.conf.current
fi

# Expose Heroku config vars to PHP-FPM processes
for var in \`env | cut -f1 -d=\`; do
	echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log /app/vendor/php/var/log/php-fpm.log /app/vendor/php/var/log/php-errors.log /app/local/var/log/newrelic/newrelic-daemon.log /app/local/var/log/newrelic/php_agent.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
(tail -f -n 0 /app/vendor/nginx/logs/*.log /app/vendor/php/var/log/*.log /app/local/var/log/newrelic/*.log &)

if [ "\${NEW_RELIC_LICENSE_KEY}" -a ! -f /app/local/NEWRELIC_VERSION ]; then
	/app/local/bin/newrelic-daemon -c /app/local/etc/newrelic.cfg -d error
fi
/app/vendor/php/sbin/php-fpm
/app/vendor/nginx/sbin/nginx

EOF
chmod +x boot.sh

echo "-----> Done with compile"